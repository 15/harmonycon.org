---
import { Image, getImage } from "astro:assets";
import Layout from "@layouts/Layout.astro";
import Footer from "@components/Footer.astro";
import Room from "@components/schedule/Room.astro";
import ScheduleHeader from "@components/schedule/ScheduleHeader.astro";

import roomEmpty from "@assets/2025/schedule/room-empty.png";

// noinspection JSUnusedGlobalSymbols
interface Props {
  day: DayOfTheWeek;
  starttime: string;
  endtime: string;
  additionalevents?: { [key: string]: string }
}

const {
  day = "friday",
  starttime: START_TIME = "10:00",
  endtime: END_TIME = "04:00",
  additionalevents = {}
} = Astro.props

import scheduleBackground from "../assets/2025/schedule/HC25_Tile_Pink.png";
const optimizedScheduleBackground = await getImage({
 src: scheduleBackground,
 format: "avif",
 width: 2000,
 });



const slots =  {
  'friday': {
    start: new Date(2025, 0, 31, 11, 0),
    end: new Date(2025, 1, 1, 2, 15),
  },
  'saturday': {
    start: new Date(2025, 1, 1, 10, 0),
    end: new Date(2025, 1, 2, 2, 15),
  },
  'sunday': {
    start: new Date(2025, 1, 2, 10, 0),
    end: new Date(2025, 1, 2, 17, 0),
  },
 }

const slotLength = 15

function asSlotTime(date: Date): string {
 return date.toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });
 }

function nextSlot(date: Date): Date {
 const next = new Date(date);
 next.setMinutes(next.getMinutes() + slotLength);
 return next;
 }

const daySlots = slots[day]

const allSlots = []

let date = daySlots.start;

while (date < daySlots.end) {
  allSlots.push(date);
  date = nextSlot(date);
}

export type DayOfTheWeek = "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday";

export enum ROOM {
  A = 0,
  B = 1,
  C = 2,
  D = 3,
  E = 4,
  F = 5,
  G = 6,
  H = 7,
  I = 8,
  J = 9,
  UNKNOWN = 10,
}

export type Event = {
  placeholder?: false;
  title: string;
  host: string;
  description: string;
  startDate: Date;
  start: string;
  endDate: Date;
  end: string;
  day: DayOfTheWeek;
  timeslots: number;
  room: ROOM;
  isConcert: boolean;
}
export type PlaceholderEvent = {
  placeholder: true,
  timeslots: number,
}

function convertTime(date: Date): string {
  return date.toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });
}
function asDate(date: string): Date {
  return new Date(date);
}

import scheduleFriday from "@data/schedule/friday.json";
import scheduleSaturday from "@data/schedule/saturday.json";
import scheduleSunday from "@data/schedule/sunday.json";
console.log(day)
const schedule = day === "friday" ? scheduleFriday : day === "saturday" ? scheduleSaturday : scheduleSunday;

const sourceEvents = schedule.filter(event => event.day === day);
sourceEvents.sort((a, b) => asDate(a.startDate).getTime() - asDate(b.startDate).getTime());


const events: {[key: number]: (Event|PlaceholderEvent)[]} = {
  ["Mane Events"]: [],
  ["Crystal Empire Theatre"]: [],
  ["Broadhorse Theatre"]: [],
  ["Horsefeld Theatre"]: [],
  ["Graumare's Chineighs Theatre"]: [],
  ["Autograph Room"]: [],
  ["Vendor Hall"]: [],
  ["Videogames"]: [],
  ["Videogames*"]: [],
  ["Tabletop"]: [],
  ["Tabletop*"]: [],
};

let sourceEventsPerRoom = []
sourceEvents.forEach(event => {
  if(!sourceEventsPerRoom[event.room]) {
    sourceEventsPerRoom[event.room] = []
  }
  sourceEventsPerRoom[event.room].push(event);
});


for (let [roomKey, roomArray] of Object.entries(events)) {
  let eventIndex = 0;
  let remainingEventSlots = 0;
  let currentEmpty = null;

  for (const slot of allSlots) {
    const roomEvents = sourceEventsPerRoom[roomKey]

    if (roomEvents != null) {
      const event = roomEvents[eventIndex]
      if (remainingEventSlots > 0) {
        remainingEventSlots -= 1;
        currentEmpty = null
        continue;
      } else if (event && asDate(event?.startDate) <= asDate(slot)) {
        remainingEventSlots = event.timeslots - 1;
        eventIndex += 1;
        roomArray.push(event);
        currentEmpty = null
        continue;
      }
    }

    if (currentEmpty != null) {
      currentEmpty.timeslots += 1;
    } else {
      currentEmpty = {
        placeholder: true,
        timeslots: 1,
      }
      roomArray.push(currentEmpty);
    }
  }
}

// console.log(events)

---

<Layout title="HarmonyCon 2025 | Schedule">
  <section
      id="bg"
      class="overflow-x-hidden mx-auto pl-2 pr-0 lg:pr-0 lg:pl-12 cursor-default flex flex-col pt-12 pb-0 lg:pt-12 lg:pb-0 items-center justify-center w-full"
  >
    <ScheduleHeader />

    <div
        class="border-2 border-black rounded-sm md:mx-0 mx-4 mb-8 w-full bg-[#fcf1e0] overscroll-none overflow-y-hidden overflow-x-scroll text-black flex "
        style="filter: drop-shadow(0 5px 5px #000); scrollbar-color: #771c2a #151515; "
        id="table"
    >
      <table
          class="table-fixed font-serif border-2 border-black w-full relative"
      >
        <div id="with-vertical-line"></div>
        <tbody>
        <tr class="border-2 bg-black text-white border-black font-semibold text-sm md:text-l text-center">
          <th class="w-20 md:w-32 lg:w-44 z-50 bg-black border-black"></th>
          {
            allSlots.map((slot, index) => (
                <td class="md:w-32 lg:w-32 w-20 border-white border-r whitespace-nowrap md:text-base text-xs">{asSlotTime(slot)}</td>
            ))
          }
        </tr>

        <Room
          index="1"
          roomname="MANE EVENTS"
          roomsrc={roomEmpty}
          events={events["Mane Events"]}
        />
        <Room
          index="2"
          roomname="Crystal Empire Theatre"
          roomsrc={roomEmpty}
          events={events["Crystal Empire Theatre"]}
        />
        <Room
          index="3"
          roomname="Broadhorse Theatre"
          roomsrc={roomEmpty}
          events={events["Broadhorse Theatre"]}
        />
        <Room
          index="4"
          roomname="Horsefeld Theatre"
          roomsrc={roomEmpty}
          events={events["Horsefeld Theatre"]}
        />
        <Room
          index="5"
          roomname="Graumare's Chineighs Theatre"
          roomsrc={roomEmpty}
          events={events["Graumare's Chineighs Theatre"]}
        />
        <Room
          index="6"
          roomname="AUTOGRAPH ROOM"
          roomsrc={roomEmpty}
          events={events["Autograph Room"]}
        />
        <Room
          index="7"
          roomname="VENDOR HALL"
          roomsrc={roomEmpty}
          events={events["Vendor Hall"]}
        />
        <Room
            index="8"
            roomname="VIDEO GAMES"
            roomsrc={roomEmpty}
            events={events["Videogames"]}
        />
        <Room
            index="9"
            roomname="VIDEO GAMES"
            roomsrc={roomEmpty}
            events={events["Videogames*"]}
        />
        <Room
            index="10"
            roomname="TABLETOP"
            roomsrc={roomEmpty}
            events={events["Tabletop"]}
        />
        <Room
            index="11"
            roomname="TABLETOP"
            roomsrc={roomEmpty}
            events={events["Tabletop*"]}
        />

        </tbody>
      </table>
    </div>
    <Footer />
  </section>
</Layout>


<style
    define:vars={{
      optimizedScheduleBackground: `url(${optimizedScheduleBackground.src})`,
    }}>

  @media (min-width: 1024px) {
    #bg {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: auto;
      min-height: 100%;
      background-image: var(--optimizedScheduleBackground);
      background-repeat: repeat;
      background-size: 20%;
      background-position: center;
      opacity: 1;
    }
  }

  @media (max-width: 1024px) {
    #bg {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: auto;
      min-height: 100%;
      background-image: var(--optimizedScheduleBackground);
      background-repeat: repeat;
      background-size: 50%;
      background-position: center;
      opacity: 1;
    }
  }

  @media (max-width: 768px) {
    #bg {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: auto;
      min-height: 100%;
      background-image: var(--optimizedScheduleBackground);
      background-repeat: repeat;
      background-size: 80%;
      background-position: center;
      opacity: 1;
    }
  }

  table {
    tr>th:first-child,
    tr>td:first-child {
      position: sticky;
      left: 0;
    }
  }
  #with-vertical-line {
    content: '';
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0rem;
    width: 4px;
    @apply rounded z-0;
    background-color: red;
    transform: translateX(-50%);
    z-index: 100;
  }
</style>

<script define:vars={{
    day,
    slots,
  }}>

  const placeRedline = function() {
    const table = document.getElementById('table');
    const line = document.getElementById("with-vertical-line");
    const roomCell = document.getElementsByClassName("agenda-room-cell")[0];

    const fridayBegin = new Date(slots.friday.start).getTime()
    const fridayEnd = new Date(slots.friday.end).getTime()
    const fridayDuration = fridayEnd - fridayBegin

    const saturdayBegin = new Date(slots.saturday.start).getTime()
    const saturdayEnd = new Date(slots.saturday.end).getTime()
    const saturdayDuration = saturdayEnd - saturdayBegin

    const sundayBegin = new Date(slots.sunday.start).getTime()
    const sundayEnd = new Date(slots.sunday.end).getTime()
    const sundayDuration = sundayEnd - sundayBegin

    const isFriday = (ms) => {
      const date = new Date(ms);
      const day = date.getDay();
      const hour = date.getHours();
      const minutes = date.getMinutes();
      
      // If it's Friday and after 11am
      if (day === 5 && (hour > 11 || (hour === 11 && minutes >= 0))) {
        return true;
      }
      // If it's Saturday but before 2:15am
      if (day === 6 && (hour < 2 || (hour === 2 && minutes <= 15))) {
        return true;
      }
      return false;
    }
    const isSaturday = (ms) => {
      const date = new Date(ms);
      const day = date.getDay();
      const hour = date.getHours();
      const minutes = date.getMinutes();
      
      // If it's Saturday and after 10am
      if (day === 6 && (hour > 10 || (hour === 10 && minutes >= 0))) {
        return true;
      }
      // If it's Sunday but before 2:15am
      if (day === 0 && (hour < 2 || (hour === 2 && minutes <= 15))) {
        return true;
      }
      return false;
    }
    const isSunday = (ms) => {
      const date = new Date(ms);
      const day = date.getDay();
      const hour = date.getHours();
      const minutes = date.getMinutes();
      
      // If it's Sunday and between 10am and 5pm
      return day === 0 && 
        ((hour > 10 || (hour === 10 && minutes >= 0)) && 
         (hour < 17 || (hour === 17 && minutes === 0)));
    }

    if (line) {
      line.style.left = '0';
    }

    let now = new Date();
    let tt = now.getTime()

    let roomCellOffset = roomCell.scrollWidth
    let tableWidth = table.scrollWidth - roomCellOffset

    const moveLine = (date) => {
      const hour = date.getHours();
      const minutes = date.getMinutes();
      const timeInMinutes = hour * 60 + minutes;
      
      let progression = 0;
      
      if (day === 'friday') {
        // Friday 11:00 AM to Saturday 2:15 AM (15h15m total)
        if (date.getDay() === 5) { // Friday
          progression = (timeInMinutes - 660) / 915; // 660 = 11:00, 915 = 15.25 hours
        } else if (date.getDay() === 6) { // Early Saturday
          progression = (timeInMinutes + 780) / 915; // 780 = 13 hours (from Friday 11pm to midnight)
        }
      } else if (day === 'saturday') {
        // Saturday 10:00 AM to Sunday 2:15 AM (16h15m total)
        if (date.getDay() === 6) { // Saturday
          progression = (timeInMinutes - 600) / 975; // 600 = 10:00, 975 = 16.25 hours
        } else if (date.getDay() === 0) { // Early Sunday
          progression = (timeInMinutes + 840) / 975; // 840 = 14 hours (from Saturday 10pm to midnight)
        }
      } else if (day === 'sunday') {
        // Sunday 10:00 AM to 5:00 PM (7h total)
        if (date.getDay() === 0) { // Sunday
          progression = (timeInMinutes - 600) / 420; // 600 = 10:00, 420 = 7 hours
        }
      }
      
      // Clamp progression between 0 and 1
      progression = Math.max(0, Math.min(1, progression));
      
      const y = (progression * tableWidth) + roomCellOffset + 2;
      if (line) {
        line.style.left = `${y}px`;
      }
    }
    
    if (isFriday(tt) && day === 'friday') {
      moveLine(now)
    } else if (isSaturday(tt) && day === 'saturday') {
      moveLine(now)
    } else if (isSunday(tt) && day === 'sunday') {
      moveLine(now)
    } else {
      if (line) {
        line.style.left = '0';
      }
    }
  }

  let timeout = false

  placeRedline()
  document.addEventListener("swup:enable", () => {
    window.swup.hooks.on("content:replace", () => {
      placeRedline()
    })
  });

  window.addEventListener("resize", function() {
    clearTimeout(timeout)
    timeout = setTimeout(placeRedline, 100)
  });

</script>

<script>
  import { gsap } from "gsap";
  import ScrollToPlugin from "gsap/ScrollToPlugin";

  gsap.registerPlugin(ScrollToPlugin);

  const scrollSideways = function () {
   const table = document.getElementById('table');
   if (table) {
     table.addEventListener('wheel', (event) => {
     event.preventDefault();
     // Use the larger of deltaX or deltaY for consistent scroll speed
     const scrollDelta = Math.abs(event.deltaX) > Math.abs(event.deltaY) ? event.deltaX : event.deltaY;
     gsap.to(table, {
      scrollTo: {
       x: table.scrollLeft + scrollDelta * 2,
                autoKill: false
       },
      ease: "power2",
      duration: 0.1
      });
     });
    }
  }

  scrollSideways();
  document.addEventListener("swup:enable", () => {
   window.swup.hooks.on("content:replace", () => {
      scrollSideways();
    })
  });
</script>
