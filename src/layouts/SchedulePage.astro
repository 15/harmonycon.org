---
import { Image, getImage } from "astro:assets";
import Schedule from "@layouts/Schedule.astro";
import Room from "@components/schedule/Room.astro";

import roomEmpty from "@assets/2025/schedule/room-empty.png";

// noinspection JSUnusedGlobalSymbols
interface Props {
  day: DayOfTheWeek;
  starttime: string;
  endtime: string;
  additionalevents?: { [key: string]: string }
}

const {
  day = "friday",
  starttime: START_TIME = "10:00",
  endtime: END_TIME = "04:00",
  additionalevents = {}
} = Astro.props

export type DayOfTheWeek = "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday";

export enum ROOM {
  A = 0,
  B = 1,
  C = 2,
  D = 3,
  E = 4,
  F = 5,
  G = 6,
  H = 7,
  UNKNOWN = 8,
}

export type Event = {
  placeholder?: false;
  title: string;
  host: string;
  description: string;
  startDate: Date;
  start: string;
  endDate: Date;
  end: string;
  day: DayOfTheWeek;
  timeslots: number;
  room: ROOM;
  isConcert: boolean;
}
export type PlaceholderEvent = {
  placeholder: true,
  timeslots: number,
  startDate: Date,
}


function convertTime(date: Date): string {
  return date.toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });
}
function asDate(date: string): Date {
  return new Date(date);
}

import schedule from "@data/schedule/friday.json";

const remoteEvents = schedule.filter(event => {
  if (event.day === day) return true;
  else return false;
});
remoteEvents.sort((a, b) => asDate(a.startDate).getTime() - asDate(b.startDate).getTime());

const events: {[key: number]: (Event|PlaceholderEvent)[]} = {
  [ROOM.A]: [],
  [ROOM.B]: [],
  [ROOM.C]: [],
  [ROOM.D]: [],
  [ROOM.E]: [],
  [ROOM.F]: [],
  [ROOM.G]: [],
};

remoteEvents.forEach(event => {
  if (Array.isArray(events[event.room])) events[event.room].push(event);
});

Object.keys(events).forEach(room => {
  const placeholderEvents: PlaceholderEvent[] = [];
  events[room].forEach((event: Event, index, evs) => {
    if (index === (events[room].length - 1)) return;
    const nextEvent: Event = evs[index + 1];
    placeholderEvents.push({
      placeholder: true,
      startDate:  asDate(event.endDate),
      timeslots: Math.round((asDate(nextEvent.startDate).getTime() - asDate(event.endDate).getTime()) / (30 * 60 * 1000))
    });
  });
  {
    const firstEvent: Event | undefined = events[room][0];
    if (firstEvent) {
      const fEStartDate = asDate(firstEvent.startDate);
      const startDate = new Date(`${fEStartDate.getFullYear()}-${fEStartDate.getMonth() + 1}-${fEStartDate.getDate()} ${START_TIME}:00`);
      placeholderEvents.push({
        placeholder: true,
        startDate,
        timeslots: Math.round((fEStartDate.getTime() - startDate.getTime()) / (30 * 60 * 1000))
      });
    }
  }
  {
    const lastEvent: Event | undefined = events[room][events[room].length - 1];
    if (lastEvent) {
      const fEEndDate = asDate(lastEvent.endDate);
      const startDate = new Date(`${fEEndDate.getFullYear()}-${fEEndDate.getMonth() + 1}-${fEEndDate.getDate() + (
        (parseInt(END_TIME) <= 10 && fEEndDate.getHours() >= 10) ? 1 : 0
      )} ${END_TIME}:00`);
      placeholderEvents.push({
        placeholder: true,
        startDate,
        timeslots: Math.round((startDate.getTime() - fEEndDate.getTime()) / (30 * 60 * 1000))
      });
    }
  }
  if (events[room].length === 0) {
    placeholderEvents.push({
      placeholder: true,
      timeslots: 1000,
      startDate: new Date(`${asDate(remoteEvents[0]?.startDate).getFullYear()}-${asDate(remoteEvents[0]?.startDate).getDate()}-${asDate(remoteEvents[0]?.startDate).getMonth() + 1} ${START_TIME}`)
    });
  }
  events[room] = events[room].concat(
    placeholderEvents.filter(event => event.timeslots > 0)
  );
  events[room].sort((a, b) => asDate(a.startDate).getTime() - asDate(b.startDate).getTime());

});

console.log(events)

---
<Schedule day={day} additionalevents={additionalevents}>
  <Room
    index="1"
    roomname="MANE EVENTS"
    roomsrc={roomEmpty}
    events={events[ROOM.A]}
  />
  <Room
    index="2"
    roomname="CUMBERLAND IJK"
    roomsrc={roomEmpty}
    events={events[ROOM.B]}
  />
  <Room
    index="3"
    roomname="CUMBERLAND EF"
    roomsrc={roomEmpty}
    events={events[ROOM.C]}
  />
  <Room
    index="4"
    roomname="CUMBERLAND L"
    roomsrc={roomEmpty}
    events={events[ROOM.D]}
  />
  <Room
    index="5"
    roomname="CUMBERLAND GH"
    roomsrc={roomEmpty}
    events={events[ROOM.E]}
  />
  <Room
    index="6"
    roomname="AUTOGRAPH ROOM"
    roomsrc={roomEmpty}
    events={events[ROOM.F]}
  />
  <Room
    index="7"
    roomname="VENDOR HALL"
    roomsrc={roomEmpty}
    events={events[ROOM.G]}
  />
</Schedule>

