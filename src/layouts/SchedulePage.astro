---
import { Image, getImage } from "astro:assets";
import Layout from "@layouts/Layout.astro";
import Footer from "@components/Footer.astro";
import Room from "@components/schedule/Room.astro";
import ScheduleHeader from "@components/schedule/ScheduleHeader.astro";

import roomEmpty from "@assets/2025/schedule/room-empty.png";

// noinspection JSUnusedGlobalSymbols
interface Props {
  day: DayOfTheWeek;
  starttime: string;
  endtime: string;
  additionalevents?: { [key: string]: string }
}

const {
  day = "friday",
  starttime: START_TIME = "10:00",
  endtime: END_TIME = "04:00",
  additionalevents = {}
} = Astro.props

import scheduleBackground from "../assets/2025/schedule/HC25_Tile_Pink.png";
const optimizedScheduleBackground = await getImage({
 src: scheduleBackground,
 format: "avif",
 width: 2000,
 });



const slots =  {
 'friday': {
 start: new Date(2025, 0, 31, 11, 30),
 end: new Date(2025, 1, 1, 1, 0),
 },
 'saturday': {
 start: new Date(2025, 1, 1, 10, 0),
 end: new Date(2025, 1, 2, 2, 0),
 },
 'sunday': {
 start: new Date(2025, 1, 2, 10, 0),
 end: new Date(2025, 1, 2, 16, 0),
 },
 }

const slotLength = 15

function getSlotTime(date: Date): string {
 return date.toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });
 }

function nextSlot(date: Date): Date {
 const next = new Date(date);
 next.setMinutes(next.getMinutes() + slotLength);
 return next;
 }

const daySlots = slots[day]

const allSlots = []

let date = daySlots.start;

while (date < daySlots.end) {
 allSlots.push(getSlotTime(date));
 date = nextSlot(date);
 }

console.log(allSlots)


export type DayOfTheWeek = "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday";

export enum ROOM {
  A = 0,
  B = 1,
  C = 2,
  D = 3,
  E = 4,
  F = 5,
  G = 6,
  H = 7,
  UNKNOWN = 8,
}

export type Event = {
  placeholder?: false;
  title: string;
  host: string;
  description: string;
  startDate: Date;
  start: string;
  endDate: Date;
  end: string;
  day: DayOfTheWeek;
  timeslots: number;
  room: ROOM;
  isConcert: boolean;
}
export type PlaceholderEvent = {
  placeholder: true,
  timeslots: number,
  startDate: Date,
}


function convertTime(date: Date): string {
  return date.toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });
}
function asDate(date: string): Date {
  return new Date(date);
}

import schedule from "@data/schedule/friday.json";

const remoteEvents = schedule.filter(event => {
  if (event.day === day) return true;
  else return false;
});
remoteEvents.sort((a, b) => asDate(a.startDate).getTime() - asDate(b.startDate).getTime());

const events: {[key: number]: (Event|PlaceholderEvent)[]} = {
  [ROOM.A]: [],
  [ROOM.B]: [],
  [ROOM.C]: [],
  [ROOM.D]: [],
  [ROOM.E]: [],
  [ROOM.F]: [],
  [ROOM.G]: [],
};

remoteEvents.forEach(event => {
  if (Array.isArray(events[event.room])) events[event.room].push(event);
});

Object.keys(events).forEach(room => {
  const placeholderEvents: PlaceholderEvent[] = [];
  events[room].forEach((event: Event, index, evs) => {
    if (index === (events[room].length - 1)) return;
    const nextEvent: Event = evs[index + 1];
    placeholderEvents.push({
      placeholder: true,
      startDate:  asDate(event.endDate),
      timeslots: Math.round((asDate(nextEvent.startDate).getTime() - asDate(event.endDate).getTime()) / (30 * 60 * 1000))
    });
  });
  {
    const firstEvent: Event | undefined = events[room][0];
    if (firstEvent) {
      const fEStartDate = asDate(firstEvent.startDate);
      const startDate = new Date(`${fEStartDate.getFullYear()}-${fEStartDate.getMonth() + 1}-${fEStartDate.getDate()} ${START_TIME}:00`);
      placeholderEvents.push({
        placeholder: true,
        startDate,
        timeslots: Math.round((fEStartDate.getTime() - startDate.getTime()) / (30 * 60 * 1000))
      });
    }
  }
  {
    const lastEvent: Event | undefined = events[room][events[room].length - 1];
    if (lastEvent) {
      const fEEndDate = asDate(lastEvent.endDate);
      const startDate = new Date(`${fEEndDate.getFullYear()}-${fEEndDate.getMonth() + 1}-${fEEndDate.getDate() + (
        (parseInt(END_TIME) <= 10 && fEEndDate.getHours() >= 10) ? 1 : 0
      )} ${END_TIME}:00`);
      placeholderEvents.push({
        placeholder: true,
        startDate,
        timeslots: Math.round((startDate.getTime() - fEEndDate.getTime()) / (30 * 60 * 1000))
      });
    }
  }
  if (events[room].length === 0) {
    placeholderEvents.push({
      placeholder: true,
      timeslots: 1000,
      startDate: new Date(`${asDate(remoteEvents[0]?.startDate).getFullYear()}-${asDate(remoteEvents[0]?.startDate).getDate()}-${asDate(remoteEvents[0]?.startDate).getMonth() + 1} ${START_TIME}`)
    });
  }
  events[room] = events[room].concat(
    placeholderEvents.filter(event => event.timeslots > 0)
  );
  events[room].sort((a, b) => asDate(a.startDate).getTime() - asDate(b.startDate).getTime());

});

console.log(events)

---

<Layout title="HarmonyCon 2025 | Schedule">
  <section
      id="bg"
      class="overflow-x-hidden mx-auto pl-2 pr-0 lg:pr-0 lg:pl-12 cursor-default flex flex-col pt-12 pb-0 lg:pt-12 lg:pb-0 items-center justify-center w-full"
  >
    <ScheduleHeader />

    <div
        class="border-2 border-black rounded-sm md:mx-0 mx-4 mb-8 w-full bg-[#fcf1e0] overscroll-none overflow-y-hidden overflow-x-scroll text-black flex "
        style="filter: drop-shadow(0 5px 5px #000); scrollbar-color: #771c2a #151515; scrollbar-gutter: stable;"
        id="table"
    >
      <table
          class="table-fixed font-serif border-2 border-black w-full relative"
      >
        <div id="with-vertical-line"></div>
        <tbody>
        <tr class="border-2 bg-black text-white border-black font-semibold text-sm md:text-l text-center">
          <th class="w-20 md:w-32 lg:w-44 z-50 bg-black border-black"></th>
          {
            allSlots.map((slot, index) => (
                <td class="md:w-24 w-16 border-white border-r">{slot}</td>
            ))
          }
        </tr>

        <Room
          index="1"
          roomname="MANE EVENTS"
          roomsrc={roomEmpty}
          events={events[ROOM.A]}
        />
        <Room
          index="2"
          roomname="CUMBERLAND IJK"
          roomsrc={roomEmpty}
          events={events[ROOM.B]}
        />
        <Room
          index="3"
          roomname="CUMBERLAND EF"
          roomsrc={roomEmpty}
          events={events[ROOM.C]}
        />
        <Room
          index="4"
          roomname="CUMBERLAND L"
          roomsrc={roomEmpty}
          events={events[ROOM.D]}
        />
        <Room
          index="5"
          roomname="CUMBERLAND GH"
          roomsrc={roomEmpty}
          events={events[ROOM.E]}
        />
        <Room
          index="6"
          roomname="AUTOGRAPH ROOM"
          roomsrc={roomEmpty}
          events={events[ROOM.F]}
        />
        <Room
          index="7"
          roomname="VENDOR HALL"
          roomsrc={roomEmpty}
          events={events[ROOM.G]}
        />

        </tbody>
      </table>
    </div>
  </section>
  <Footer />
</Layout>


<style
    define:vars={{
      optimizedScheduleBackground: `url(${optimizedScheduleBackground.src})`,
    }}>

  #bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: auto;
    min-height: 100%;
    background-image: var(--optimizedScheduleBackground);
    background-repeat: repeat;
    background-size: 20%;
    background-position: center;
    opacity: 1;
  }
  table {
    tr>th:first-child,
    tr>td:first-child {
      position: sticky;
      left: 0;
    }
  }
  #with-vertical-line {
    content: '';
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0rem;
    width: 4px;
    @apply rounded z-0;
    background-color: red;
    transform: translateX(-50%);
    z-index: 100;
  }
</style>

<script define:vars={{day}}>
  const table = document.getElementById('table');
  const line = document.getElementById("with-vertical-line");
  const roomCell = document.getElementsByClassName("agenda-room-cell")[0];

  const fridayBegin = new Date(2024,8,27,10,0,0).getTime()
  const fridayEnd = new Date(2024,8,28,4,0,0).getTime()
  const fridayDuration = fridayEnd - fridayBegin

  const saturdayBegin = new Date(2024,8,28,10,0,0).getTime()
  const saturdayEnd = new Date(2024,8,29,4,0,0).getTime()
  const saturdayDuration = saturdayEnd - saturdayBegin

  const sundayBegin = new Date(2024,8,29,9,0,0).getTime()
  const sundayEnd = new Date(2024,8,29,20,30,0).getTime()
  const sundayDuration = sundayEnd - sundayBegin

  const isFriday = (ms) => ms >= fridayBegin && ms < fridayEnd;
  const isSaturday = (ms) => ms >= saturdayBegin && ms < saturdayEnd;
  const isSunday = (ms) => ms >= sundayBegin && ms < sundayEnd;

  const placeRedline = function() {
    if (line) {
      line.style.left = '0';
    }

    let now = new Date();
    let tt = now.getTime()

    let roomCellOffset = roomCell.scrollWidth
    let tableWidth = table.scrollWidth - roomCellOffset

    const moveLine = (progression) => {
      console.log({progression, tableWidth, roomCellOffset})
      const y =  (progression * tableWidth) + roomCellOffset + 2
      if (line) {
        line.style.left = `${y}px`;
      }
    }

    if (isFriday(tt) && day === 'Friday') {
      moveLine((tt-fridayBegin)/(fridayDuration))
    } else if (isSaturday(tt) && day === 'Saturday') {
      moveLine((tt-saturdayBegin)/(saturdayDuration))
    } else if (isSunday(tt) && day === 'Sunday') {
      moveLine((tt-sundayBegin)/(sundayDuration))
    } else {
      if (line) {
        line.style.left = '0';
      }
    }
  }

  let timeout = false
  document.addEventListener("astro:page-load", placeRedline);
  window.addEventListener("resize", function() {
    clearTimeout(timeout)
    timeout = setTimeout(placeRedline, 100)
  });

  import { gsap } from "gsap";

  import ScrollToPlugin from "gsap/ScrollToPlugin";
  gsap.registerPlugin(ScrollToPlugin);

  document.addEventListener("astro:page-load", () => {
    const table = document.getElementById('table');
    if (table) {
      table.addEventListener('wheel', (event) => {
        event.preventDefault();
        gsap.to(table, {
          scrollTo: {
            x: table.scrollLeft + event.deltaY * 2, // Adjust multiplier for speed
            autoKill: false
          },
          ease: "power2",
          duration: 0.1
        });
      });
    }
  });
</script>
