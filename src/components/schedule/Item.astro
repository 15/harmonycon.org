---
import { Image } from "astro:assets";

const {
  title,
  start = "11:30 AM",
  end = "12:00 AM",
  host = "Host",
  description = "Lorem ipsum dolor sit amet",
  colspan,
  type = 0,
  day = "Friday",
  rating = "Not Rated"
} = Astro.props;


const roomType = [
  "room1",
  "room2",
  "room3",
  "room4",
  "room5",
  "room6",
  "concert",
  "room7",
];
---

<dialog class="p-0 cursor-default text-black font-serif text-center" id={title}>
  <div
    class={`p-8 relative justify-center rounded flex flex-col w-full h-auto sm:w-96 md:w-128 lg:w-160 xl:w-224 lg:h-auto  ${roomType[type]}-dialog`}
  >
  <!-- {
    type !== 6 ? (
      <div class="font-normal italic text-3xl leading-none uppercase font-sans">
        Rating: {rating}
      </div>
    ) : null
  } -->

  <div class="font-medium text-3xl leading-none italic mb-12">Host: {host}</div>
    <div class="font-medium text-6xl leading-none uppercase tracking-wide mb-4" style="font-family: 'Poppins';">{title}</div>
    <div class="font-medium text-3xl leading-none mb-8"  style="font-family: 'Poppins';">
      {day} @ {start}-{end} ({colspan * 30} minutes)
    </div>
    <div class="my-2 leading-5 text-lg"  style="font-family: 'Poppins';" set:html={description} />
  </div>
</dialog>
<td
  class={`${roomType[type]} border-2 border-black align-top duration-300 cursor-pointer`}
  colspan={colspan}
  id={`item-${title}`}
>
  <div
    class="relative rounded p-1 md:p-2 h-16 md:h-24"
  >
    <div
      class="md:line-clamp-none line-clamp-3 font-semibold text-base md:text-lg lg:text-xl !leading-none font-serif"
    >
      {title}
    </div>
    <!-- <div class="text-lg">{start} &ndash; {end}</div> -->

    <div
      class="hidden md:block leading-5 text-xs md:text-base font-sans"
      set:html="Click for more info!"
    />
  </div>
</td>

<style>
  .room1 {
    @apply bg-pink-200 hover:bg-pink-300;
  }
  .room2 {
    @apply bg-orange-200 hover:bg-orange-300;
  }
  .room3 {
    @apply bg-blue-200 hover:bg-blue-300;
  }
  .room4 {
    @apply bg-green-200 hover:bg-green-300;
  }
  .room5 {
    @apply bg-red-200 hover:bg-red-300;
  }
  .room6 {
    @apply bg-purple-200 hover:bg-purple-300;
  }
  .room7 {
    @apply bg-neutral-300 hover:bg-neutral-400;
  }
  .concert {
    @apply bg-neutral-50 hover:bg-black text-black hover:text-white;
  }
  .room1-dialog {
    @apply bg-white;
  }
  .room2-dialog {
    @apply bg-white;
  }
  .room3-dialog {
    @apply bg-white;
  }
  .room4-dialog {
    @apply bg-white;
  }
  .room5-dialog {
    @apply bg-white;
  }
  .room6-dialog {
    @apply bg-white;
  }
  .room7-dialog {
    @apply bg-white;
  }
  .concert-dialog {
    @apply bg-black text-white;
  }

  dialog {
    @apply rounded;
    filter: drop-shadow(0 50px 50px #000);
    outline: none;
  }

  dialog[open] {
    animation: fade 0.3s ease-in-out normal;
  }

  dialog::backdrop {
    background-image: linear-gradient(45deg, #000, #000);
    opacity: 0.5;
  }

  dialog:focus {
    outline: none;
  }

  @keyframes fade {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>

<!-- <script>
  import tippy from "tippy.js";
  import "tippy.js/dist/tippy.css";
  import "tippy.js/animations/shift-away-extreme.css";

  tippy(document.querySelector(".rating-icon"), {
    content: `<span class='font-medium'>After-dark vendor hall (18+)</span>`,
    placement: "top",
    animation: "shift-away-extreme",
    allowHTML: true,
  });
</script> -->

<script define:vars={{ title }}>
  function initializeDialog(title) {
    const dialog = document.getElementById(title);
    const el = document.getElementById(`item-${title}`);

    if (dialog instanceof HTMLDialogElement && el) {
      el.addEventListener("click", () => {
        dialog.showModal();
      });

      dialog.addEventListener("click", (e) => {
        const dialogDimensions = dialog.getBoundingClientRect();
        if (
          e.clientX < dialogDimensions.left ||
          e.clientX > dialogDimensions.right ||
          e.clientY < dialogDimensions.top ||
          e.clientY > dialogDimensions.bottom
        ) {
          dialog.close();
        }
      });
    }
  }

  // Initialize on page load
  document.addEventListener("astro:page-load", () => {
    initializeDialog(title);
  });

  // Also initialize immediately in case astro:page-load doesn't fire
  initializeDialog(title);
</script>
