---
import { Image } from "astro:assets";
import img from "@assets/2025/schedule/ponyawards.png";

const {
  title,
  startDate,
  host = "Host",
  description = "Lorem ipsum dolor sit amet",
  colspan,
  type = 0,
  day = "Friday",
  rating = "Not Rated"
} = Astro.props;

// Format start time and calculate end time
const startTime = startDate ? new Date(startDate) : new Date();
const endTime = new Date(startTime.getTime() + (colspan * 15 * 60 * 1000));

const formatTime = (date) => {
  return date.toLocaleTimeString('en-US', { 
    hour: 'numeric',
    minute: '2-digit',
    hour12: true 
  });
};

const start = formatTime(startTime);
const end = formatTime(endTime);

const roomType = [
  "room1",
  "room2",
  "room3",
  "room4",
  "room5",
  "room6",
  "concert",
  "room7",
];
---

<td
  class={`border-2 border-black align-top duration-300 cursor-pointer`}
  colspan={colspan}
  id={`item-${title}`}
>
  <dialog class="p-0 cursor-default text-white font-serif text-center" id={title}>
    <div
        class={`p-8 relative justify-center rounded flex flex-col w-full h-auto sm:w-96 md:w-128 lg:w-160 xl:w-224 lg:h-auto  ${roomType[type]}-dialog`}
    >
      <!-- {
        type !== 6 ? (
          <div class="font-normal italic text-3xl leading-none uppercase font-sans">
            Rating: {rating}
          </div>
        ) : null
      } -->

      <div class="font-medium text-3xl leading-none italic mb-12">Host: {host}</div>
      <div class="font-medium text-6xl leading-none uppercase tracking-wider mb-6" style="font-family: 'Poppins';">{title}</div>
      <div class="font-medium text-3xl leading-none mb-8 uppercase"  style="font-family: 'Poppins';">
        {day} @ {start}-{end} ({colspan * 15} minutes)
      </div>
      <div class="my-8 leading-7 text-lg text-left w-[75%] mx-auto"  style="font-family: 'Poppins';" set:html={description} />
      <div class="w-[80%] mx-auto h-[3px] bg-white my-8"></div>

      <div class="mt-auto">
        <Image
            src={img}
            alt="The Pony Awards"
            width={150}
            class="mx-auto"
        />
      </div>
    </div>
  </dialog>
  <div
    class="relative rounded p-1 md:p-2 h-16 md:h-24"
  >
    <div
      class="line-clamp-3 font-semibold text-base md:text-lg lg:text-xl !leading-none font-serif"
    >
      {title}
    </div>
    <!-- <div class="text-lg">{start} &ndash; {end}</div> -->

    <div
      class="hidden md:block leading-5 text-xs md:text-base font-sans"
      set:html="Click for more info!"
    />
  </div>
</td>

<style>
  .concert {
    @apply bg-neutral-50 hover:bg-black text-black hover:text-white;
  }
  .room1-dialog {
    @apply bg-black;
  }
  .room2-dialog {
    @apply bg-white;
  }
  .room3-dialog {
    @apply bg-white;
  }
  .room4-dialog {
    @apply bg-white;
  }
  .room5-dialog {
    @apply bg-white;
  }
  .room6-dialog {
    @apply bg-white;
  }
  .room7-dialog {
    @apply bg-white;
  }
  .concert-dialog {
    @apply bg-black text-white;
  }

  dialog {
    @apply rounded;
    filter: drop-shadow(0 50px 50px #000);
    outline: none;
  }

  dialog[open] {
    animation: fade 0.3s ease-in-out normal;
  }

  dialog::backdrop {
    background-image: linear-gradient(45deg, #000, #000);
    opacity: 0.5;
  }

  dialog:focus {
    outline: none;
  }

  @keyframes fade {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>

<!-- <script>
  import tippy from "tippy.js";
  import "tippy.js/dist/tippy.css";
  import "tippy.js/animations/shift-away-extreme.css";

  tippy(document.querySelector(".rating-icon"), {
    content: `<span class='font-medium'>After-dark vendor hall (18+)</span>`,
    placement: "top",
    animation: "shift-away-extreme",
    allowHTML: true,
  });
</script> -->

<script define:vars={{ title }}>
  function initializeDialog(title) {
    const dialog = document.getElementById(title);
    const el = document.getElementById(`item-${title}`);

    if (dialog instanceof HTMLDialogElement && el) {
      el.addEventListener("click", () => {
        dialog.showModal();
      });
    }

    if (dialog instanceof HTMLDialogElement) {
      dialog.addEventListener("click", (e) => {
        if (e.target === dialog && dialog instanceof HTMLDialogElement) {
          e.stopPropagation();
          dialog.close();
        }
      });
    }
  }

  // Initialize on page load
  document.addEventListener("astro:page-load", () => {
    initializeDialog(title);
  });

  // Also initialize immediately in case astro:page-load doesn't fire
  initializeDialog(title);
</script>
