---
import { Image, getImage } from "astro:assets";
import Layout from "../layouts/Layout.astro";
import img1 from "../assets/2025/flyer.png";
import img2 from "../assets/2025/playbill/temp.png";
import img3 from "../assets/2025/playbill/producersnotext.png";
import img4 from "../assets/2025/playbill/the_Stallion_of_the_Opera_Final_No_Text.png";
import img5 from "../assets/2025/playbill/HarmonyCon-CodeOfConduct2.png";
import img6 from "../assets/MF/playbills/mascots.png";
import img7 from "../assets/2025/playbill/winged.png";
import img8 from "../assets/2025/playbill/Clawstin.png";
import img9 from "../assets/2025/flyer.png";
import Playbill from "../components/Playbill.astro";
import Footer from "../components/Footer.astro";

import mainBackground from "../assets/2025/bg/bg2.jpg";
const optimizedMainBackground = await getImage({
  src: mainBackground,
  format: "avif",
  width: 2000,
});
---

<Layout
  title="HarmonyCon 2025 | Main"
  desktopOverflow="true"
  mobileOverflow="true"
>
  <div id="bg" class="md:px-0 px-4 flex flex-col pt-4 pb-4">
    <ul class="playbills text-black">
      <li class="md:mb-8" style="filter: drop-shadow(0 5px 5px #000);">
        <Playbill
          src={img2}
          href="/register"
          idx={2}
          active={true}
          title="Register"
        />
      </li>
      <li class="md:mt-40" style="filter: drop-shadow(0 5px 5px #000);">
        <Playbill
          src={img3}
          href="/venue"
          idx={3}
          active={true}
          title="Venue"
        />
      </li>
      <li class="md:mb-8" style="filter: drop-shadow(0 5px 5px #000);">
        <Playbill
          src={img4}
          href="/apply"
          idx={4}
          active={true}
          title="Apply"
        />
      </li>
      <li class="md:mt-40" style="filter: drop-shadow(0 5px 5px #000);">
        <Playbill src={img5} href="/coc" idx={5} active={true} title="Rules" />
      </li>
      <li class="md:mb-8" style="filter: drop-shadow(0 5px 5px #000);">
        <Playbill
          src={img7}
          href="/gallery"
          idx={7}
          active={true}
          title="Gallery"
        />
      </li>
      <li class="md:mt-40" style="filter: drop-shadow(0 5px 5px #000);">
        <Playbill
          src={img8}
          href="/credits"
          idx={8}
          active={true}
          title="Credits"
        />
      </li>
    </ul>
    <Footer />
  </div>
</Layout>

<script>
  // create an infinite loop

  import { gsap } from "gsap";
  import { Observer } from "gsap/Observer";
  gsap.registerPlugin(Observer);
  document.addEventListener("swup:enable", () => {
    window.swup.hooks.on("content:replace", () => {
      if (
        window.innerWidth >= 768 &&
        window.location.pathname.includes("main")
      ) {
        initLoop();
      }
    });
  });

  const initLoop = () => {
    let loop = horizontalLoop(".playbills li", { repeat: -1, speed: 0.3 });
    // create a tween that'll always decelerate the timeScale of the timeline back to 0 over the course of 0.5 seconds (or whatever)
    let slow = gsap.to(loop, { timeScale: 0, duration: 0.5 });
    // make the loop stopped initially.
    loop.timeScale(0);

    // now use an Observer to listen to pointer/touch/wheel events and set the timeScale of the infinite looping timeline accordingly.
    Observer.create({
      target: ".playbills",
      type: "pointer,touch,wheel",
      wheelSpeed: -1,
      onChange: (self) => {
        loop.timeScale(
          Math.abs(self.deltaX) > Math.abs(self.deltaY)
            ? -self.deltaX
            : -self.deltaY
        ); // whichever direction is bigger
        slow.invalidate().restart(); // now decelerate
      },
    });
  };

  if (window.innerWidth >= 768) {
    initLoop();
  }

  /*
This helper function makes a group of elements animate along the x-axis in a seamless, responsive loop.

Features:
 - Uses xPercent so that even if the widths change (like if the window gets resized), it should still work in most cases.
 - When each item animates to the left or right enough, it will loop back to the other side
 - Optionally pass in a config object with values like "speed" (default: 1, which travels at roughly 100 pixels per second), paused (boolean),  repeat, reversed, and paddingRight.
 - The returned timeline will have the following methods added to it:
   - next() - animates to the next element using a timeline.tweenTo() which it returns. You can pass in a vars object to control duration, easing, etc.
   - previous() - animates to the previous element using a timeline.tweenTo() which it returns. You can pass in a vars object to control duration, easing, etc.
   - toIndex() - pass in a zero-based index value of the element that it should animate to, and optionally pass in a vars object to control duration, easing, etc. Always goes in the shortest direction
   - current() - returns the current index (if an animation is in-progress, it reflects the final index)
   - times - an Array of the times on the timeline where each element hits the "starting" spot. There's also a label added accordingly, so "label1" is when the 2nd element reaches the start.
 */
  function horizontalLoop(items, config) {
    items = gsap.utils.toArray(items);
    config = config || {};
    let tl = gsap.timeline({
        repeat: config.repeat,
        paused: config.paused,
        defaults: { ease: "none" },
        onReverseComplete: () =>
          tl.totalTime(tl.rawTime() + tl.duration() * 100),
      }),
      length = items.length,
      startX = items[0].offsetLeft,
      times = [],
      widths = [],
      xPercents = [],
      curIndex = 0,
      pixelsPerSecond = (config.speed || 1) * 100,
      snap =
        config.snap === false ? (v) => v : gsap.utils.snap(config.snap || 1), // some browsers shift by a pixel to accommodate flex layouts, so for example if width is 20% the first element's width might be 242px, and the next 243px, alternating back and forth. So we snap to 5 percentage points to make things look more natural
      totalWidth,
      curX,
      distanceToStart,
      distanceToLoop,
      item,
      i;
    gsap.set(items, {
      // convert "x" to "xPercent" to make things responsive, and populate the widths/xPercents Arrays to make lookups faster.
      xPercent: (i, el) => {
        let w = (widths[i] = parseFloat(gsap.getProperty(el, "width", "px")));
        xPercents[i] = snap(
          (parseFloat(gsap.getProperty(el, "x", "px")) / w) * 100 +
            gsap.getProperty(el, "xPercent")
        );
        return xPercents[i];
      },
    });
    gsap.set(items, { x: 0 });
    totalWidth =
      items[length - 1].offsetLeft +
      (xPercents[length - 1] / 100) * widths[length - 1] -
      startX +
      items[length - 1].offsetWidth *
        gsap.getProperty(items[length - 1], "scaleX") +
      (parseFloat(config.paddingRight) || 0);
    for (i = 0; i < length; i++) {
      item = items[i];
      curX = (xPercents[i] / 100) * widths[i];
      distanceToStart = item.offsetLeft + curX - startX;
      distanceToLoop =
        distanceToStart + widths[i] * gsap.getProperty(item, "scaleX");
      tl.to(
        item,
        {
          xPercent: snap(((curX - distanceToLoop) / widths[i]) * 100),
          duration: distanceToLoop / pixelsPerSecond,
        },
        0
      )
        .fromTo(
          item,
          {
            xPercent: snap(
              ((curX - distanceToLoop + totalWidth) / widths[i]) * 100
            ),
          },
          {
            xPercent: xPercents[i],
            duration:
              (curX - distanceToLoop + totalWidth - curX) / pixelsPerSecond,
            immediateRender: false,
          },
          distanceToLoop / pixelsPerSecond
        )
        .add("label" + i, distanceToStart / pixelsPerSecond);
      times[i] = distanceToStart / pixelsPerSecond;
    }
    function toIndex(index, vars) {
      vars = vars || {};
      Math.abs(index - curIndex) > length / 2 &&
        (index += index > curIndex ? -length : length); // always go in the shortest direction
      let newIndex = gsap.utils.wrap(0, length, index),
        time = times[newIndex];
      if (time > tl.time() !== index > curIndex) {
        // if we're wrapping the timeline's playhead, make the proper adjustments
        vars.modifiers = { time: gsap.utils.wrap(0, tl.duration()) };
        time += tl.duration() * (index > curIndex ? 1 : -1);
      }
      curIndex = newIndex;
      vars.overwrite = true;
      return tl.tweenTo(time, vars);
    }
    tl.next = (vars) => toIndex(curIndex + 1, vars);
    tl.previous = (vars) => toIndex(curIndex - 1, vars);
    tl.current = () => curIndex;
    tl.toIndex = (index, vars) => toIndex(index, vars);
    tl.times = times;
    tl.progress(1, true).progress(0, true); // pre-render for performance
    if (config.reversed) {
      tl.vars.onReverseComplete();
      tl.reverse();
    }
    return tl;
  }
</script>

<style
  define:vars={{
    optimizedMainBackground: `url(${optimizedMainBackground.src})`,
  }}
>
  #bg {
    position: absolute;
    overflow: hidden;
    top: 0;
    left: 0;
    width: 100%;
    height: auto;
    min-height: 100%;
    /* height: auto; */

    background-image: var(--optimizedMainBackground);
    background-repeat: repeat;
    background-size: 20%;
    background-position: center;
    opacity: 1;
  }

  @media (min-width: 768px) {
    .playbills {
      @apply flex flex-nowrap flex-row items-center h-[calc(100vh-4rem)];
    }

    .playbills li {
      list-style: none;
      /* padding: 0; */
      @apply px-8;
      text-align: center;
      line-height: 18rem;
      font-size: 2rem;
      font-family: sans-serif;
      background-color: transparent;
      border-radius: 0.8rem;
    }
  }

  @media (max-width: 768px) {
    .playbills {
      @apply grid grid-cols-2;
    }

    .playbills li {
    }
  }

  @media (max-width: 640px) {
    .playbills {
      @apply grid grid-cols-1 gap-y-8 px-8;
    }

    .playbills li {
    }
  }
</style>
